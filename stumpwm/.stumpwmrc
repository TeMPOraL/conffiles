;;; -*-lisp-*-
;;; Yay, my ever improving StumpWM config xD.

(in-package :stumpwm)


;;; Finding local SBCL source - I forgot to set that up when first compiling StumpWM binary.
(setf (logical-pathname-translations "SYS")
      '(("SYS:SRC;**;*.*.*"
         #P"/home/temporal/repos/sbcl/src/**/*.*")
        ("SYS:CONTRIB;**;*.*.*"
         #P"/home/temporal/repos/sbcl/contrib/**/*.*")))



(ql:quickload :external-program)
(ql:quickload :cl-fsnotify) ;for filesystem notifications


;;; SWANK
(ql:quickload :swank)
(swank-loader:init)
(swank:create-server :port 4123
                     :style swank:*communication-style*
                     :dont-close t)


;;; Utilities

(defun cat (&rest strings) "Concatenates strings, like the Unix command 'cat'. A shortcut for (concatenate 'string foo bar)."
       (apply 'concatenate 'string strings))

;;; FIXME Probably not needed - stumpwm has a builtin for that.
(defun run-external-program (cmd args)
  (with-open-stream (s (make-string-output-stream))
    (external-program:run cmd args :output s)
    (string-trim '(#\Newline #\Space) (get-output-stream-string s))))


;;; Mode line configuration
(defparameter *org-clock-current-task* "[N/A]")
(defparameter *dropbox-current-status* "[Dropbox current status here]")

(defun current-hostname ()
  (run-external-program "hostname" '()))

(defun current-ips ()
  (run-external-program "hostname" '("-I")))

(defun current-dropbox ()
  ;; TODO colors
  (run-external-program "dropbox" '("status")))

;;; mode line
(setf *mode-line-timeout* 1)

(setf *group-format* "%s%n")            ;Just status and number - to save space.

(setf *screen-mode-line-format*
      (list "%g|%v | ^1"
            '(:eval *org-clock-current-task*)
            "^>"
            '(:eval *dropbox-current-status*)
            " ^2"
            (current-hostname)
            "^n | "
            (current-ips)
            " | "
            "^B%d^b"))

(setf *time-modeline-string*
      "^b%a %b ^B%e^3 %H:%M:%S^n")

;; Turn on the modeline
(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))


;;; Dropbox monitoring.
;;; Offloaded from modeline for performance.
(defvar *dropbox-monitoring-timer* nil)
(defparameter +dropbox-monitoring-interval-seconds+ 2)

(unless *dropbox-monitoring-timer*
  (setf *dropbox-monitoring-timer* (run-with-timer +dropbox-monitoring-interval-seconds+
                                                   +dropbox-monitoring-interval-seconds+
                                                   (lambda ()
                                                     (setf *dropbox-current-status* (current-dropbox))))))


;;; Org clock fetching
;;; TODO turn into fsnotify hooks
(defparameter +org-clock-file-name+ "/home/temporal/.org.clock")
(defparameter +org-clock-monitoring-interval-seconds+ 5)
(defvar *fs-monitoring-timer* nil)

(defun fetch-current-org-clock ()
  (ignore-errors (read-file-into-string +org-clock-file-name+)))

(unless *fs-monitoring-timer*
  (unless (and (boundp 'cl-fsnotify::*inotify*)
               cl-fsnotify::*inotify*) ; HACK to ensure we don't reopen fsnotify when re-evaluating the config
    (cl-fsnotify:open-fsnotify))
  (cl-fsnotify:add-watch +org-clock-file-name+)
  (setf *fs-monitoring-timer* (run-with-timer +org-clock-monitoring-interval-seconds+
                                              +org-clock-monitoring-interval-seconds+
                                              (lambda ()
                                                (when (some (lambda (event)
                                                              (and (consp event)
                                                                   (stringp (car event))
                                                                   (string= (car event) +org-clock-file-name+)))
                                                            (cl-fsnotify:get-events))
                                                  (setf *org-clock-current-task* (fetch-current-org-clock)))))))


;;; Window groups
;;; FIXME this business with ensuring groups is kinda broken.
;;; FIXME also doesn't work all too well when reloading the RC file.
(defun group-exists-p (group-name)
  (find-if (lambda (group)
             (string= group-name
                      (group-name group)))
           (screen-groups (current-screen))))

(defun ensure-group (group-name)
  (unless (group-exists-p group-name)
    (stumpwm::run-commands (cat "gnewbg " group-name))))

(setf (group-name (first (screen-groups (current-screen)))) "Terminal") ;FIXME need to sort by group # first.

(ensure-group "Emacs")
(ensure-group "Browsing")
(ensure-group "Dev")
(ensure-group "IRC")

;; bind g-e to switch to Emacs group.
;; bind g-b to switch to browser group.
;; bind g-t to switch to terminal group.

(defcommand emacs () ()  ;! redefining emacs command
  "Start Emacs or switch to it, if it is already running."
  (run-or-raise "emacs" '(:class "Emacs")))

;;; TODO make some direct connection to Alice xD.

(defcommand color-map () ()
            "Show current color map."
            (echo-string (current-screen) "^0 0^1 1^2 2^3 3^4 4^5 5^6 6^7 7"))

;;; Hooks
(defun my-modeline-click-hook (screen button x y)
  (message "Clicked: X:~A, Y:~A" x y))

(add-hook *mode-line-click-hook* 'my-modeline-click-hook)

;;; Fix up the keyboard
(run-external-program "setxkbmap" '("-layout" "pl" "-option" "ctrl:nocaps"))

;;; TODO steal some stuff from https://github.com/joelagnel/stumpwm-goodies


;;; Volume control
;;; FIXME It breaks when default audio sink is not sink 0.
;;; TODO Introduce a way to list sinks and select active one (for volume controls).
;;; TODO Maybe introduce a smart way to "guess" the default one.

(defun current-volume-settings ()
  "Return current volume settings as multiple values (`MUTEDP', `VOLUME-LEFT-%', `VOLUME-RIGHT-%')."
  (let* ((raw-output (run-shell-command "pactl list sinks" t))
         (raw-mute (nth-value 1 (cl-ppcre:scan-to-strings "Mute: ([a-z]+)" raw-output)))
         (raw-volume (nth-value 1 (cl-ppcre:scan-to-strings "Volume: .+/\\s+(\\d+).+/.+/\\s+(\\d+).+/" raw-output)))
         (mutedp (string= (svref raw-mute 0) "yes"))
         (vol%-l (parse-integer (svref raw-volume 0)))
         (vol%-r (parse-integer (svref raw-volume 1))))
    (values mutedp vol%-l vol%-r)))

(defun display-current-volume ()
  "Graphically display the current volume state."
  (multiple-value-bind (mutedp left% right%)
      (current-volume-settings)
    (let ((*record-last-msg-override* t))
      (message "Volume: ~:[~;^1MUTE^n~] [~D%/~D%]" mutedp left% right%))))

(defcommand vol+ (dvol force) ((:number "Delta % (can be negative): ") (:y-or-n "Override volume limits? "))
  "Change the volume by `DV' percent, possibly going over 100% if `FORCE' is T."
  (multiple-value-bind (mutedp left% right%)
      (current-volume-settings)
    (declare (ignore mutedp))
    (let* ((current (max left% right%))
           (target (+ current dvol))
           (final (if force
                      (max 0 target)
                      (clamp target 0 100))))
      (run-shell-command (format nil "pactl set-sink-volume 0 ~D%" final))))
  (display-current-volume))

(defcommand vol-mute () ()
  "Toggle mute of volume."
  (run-shell-command "pactl set-sink-mute 0 toggle" t)
  (display-current-volume))

;;; Within bounds
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioLowerVolume") "vol+ -5 n")
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioRaiseVolume") "vol+ 5 n")
(define-key stumpwm:*top-map* (stumpwm:kbd "C-XF86AudioLowerVolume") "vol+ -1 n")
(define-key stumpwm:*top-map* (stumpwm:kbd "C-XF86AudioRaiseVolume") "vol+ 1 n")
(define-key stumpwm:*top-map* (stumpwm:kbd "S-XF86AudioLowerVolume") "vol+ -25 n")
(define-key stumpwm:*top-map* (stumpwm:kbd "S-XF86AudioRaiseVolume") "vol+ 25 n")

;;; Outside bounds
(define-key stumpwm:*top-map* (stumpwm:kbd "M-XF86AudioLowerVolume") "vol+ -5 y")
(define-key stumpwm:*top-map* (stumpwm:kbd "M-XF86AudioRaiseVolume") "vol+ 5 y")
(define-key stumpwm:*top-map* (stumpwm:kbd "M-C-XF86AudioLowerVolume") "vol+ -1 y")
(define-key stumpwm:*top-map* (stumpwm:kbd "M-C-XF86AudioRaiseVolume") "vol+ 1 y")
(define-key stumpwm:*top-map* (stumpwm:kbd "M-S-XF86AudioLowerVolume") "vol+ -25 y")
(define-key stumpwm:*top-map* (stumpwm:kbd "M-S-XF86AudioRaiseVolume") "vol+ 25 y")

;;; Muting
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioMute") "vol-mute")


;;; Wallpaper
(run-shell-command "display -window root /home/temporal/Pictures/ufp.jpg")


;;; Starting services.
(run-shell-command "dropbox start")     ; Dropbox
(run-shell-command "pulseaudio -D")     ; PulseAudio


;;; Better group & window navigation.
;;; Super + 0-9 -> change frame.
;;; Super + Ctrl + 0-9 - change group.
;;; Super + Shift + 0-9 - pull window.
;;; FIXME Super + Ctrl + 4 doesn't work for some magic reason. Doesn't seem to be registered
;;;       at all by StumpWM.

(setf *window-number-map* "1234567890")
(setf *frame-number-map* "1234567890abcdefghijklmnopqrstuvxwyz")

(defun downshift-number-key (number)
  "For a number `NUMBER', return a character that would be typed when that
number is pressed with Shift key held, on a typical US keyboard (matching my
Polish layout)."
  (ecase number
    (1 #\!)
    (2 #\@)
    (3 #\#)
    (4 #\$)
    (5 #\%)
    (6 #\^)
    (7 #\&)
    (8 #\*)
    (9 #\()
    (0 #\))))

(loop for key upto 9 do
     (define-key stumpwm:*top-map*
         (stumpwm:kbd (format nil "s-~D" key))
       (format nil "fselect ~D" key))
     (define-key stumpwm:*top-map*
         (stumpwm:kbd (format nil "C-s-~D" key))
       (format nil "gselect ~D" key))
     (define-key stumpwm:*top-map*
         (stumpwm:kbd (format nil "s-~A" (downshift-number-key key)))
       (format nil "pull-window-by-number ~D" key)))


;;; Tweaks for better dual-monitor setup
(setf *window-border-style* :none)

(define-key *top-map* (kbd "s-f") "fselect") ; for faster access to select frame by number

;;; This is like fnext, but restricted to current head only.
(defun focus-next-frame-on-current-head (group)
  "Focus next frame, limited to current head."
  (let ((current-head (group-current-head group)))
    (focus-frame-after group
                       (remove-if-not (lambda (frame)
                                        (eql (frame-head group frame)
                                             current-head))
                                      (group-frames group)))))

(defcommand (fnext-head tile-group) () ()
  "Like `fnext', but only within current head."
  (focus-next-frame-on-current-head (current-group)))

(defun focus-current-frame-on-other-head (group)
  "Focus first frame on the next head."
  (let* ((remaining-heads (cdr (member (group-current-head group) (screen-heads (current-screen)))))
         (other-head (if (null remaining-heads)
                         (first (screen-heads (current-screen)))
                         (car remaining-heads))))
    (focus-frame group (first (remove-if-not (lambda (frame)
                                               (eql (frame-head group frame)
                                                    other-head))
                                             (group-frames group))))))

(defcommand (hnext tile-group) () ()
  "Switch to next head, focusing on first frame there."
  (focus-current-frame-on-other-head (current-group)))

(define-key *top-map* (kbd "s-o") "fnext-head")
(define-key *top-map* (kbd "s-p") "hnext")



;; (setf *colors* (list "#3c4c55"      ; 0 black
;;                      "#d18ec2"      ; 1 red
;;                      "#ff6a6a"      ; 2 green
;;                      "#dada93"      ; 3 yellow
;;                      "#83afe5"      ; 4 blue
;;                      "#7fc1ca"      ; 6 cyan
;;                      "#9a93e1"      ; 5 magenta
;;                      "#899ba6")) ; 7 white

;; LCARS
;; (setf *colors* (list "#3c4c55"      ; 0 black
;;                      "#ff0000"      ; 1 red
;;                      "#a27fa5"      ; 2 green
;;                      "#ffff33"      ; 3 yellow
;;                      "#99ccff"      ; 4 blue
;;                      "#ccccff"      ; 6 cyan
;;                      "#adacd8"      ; 5 magenta
;;                      "#ffffff")) ; 7 white
;; (update-color-map (current-screen))

;; ORIGINAL:
;; ("black" "red" "green" "yellow" "blue" "magenta" "cyan" "white")
